#!/usr/bin/env python
"""coxy server

Usage:
  cosrv [options] [--help]

Options:
  --help                 show this help message and exit
  -v, --version          show version
  -h, --host=<host>      specify listen host [default: localhost]
  -p, --port=<port>      specift listen port [default: 8069]
"""

from docopt import docopt
from aiohttp import web, WSCloseCode, WSMsgType
import asyncio
import re
import json


async def http_handler(request):
    return web.FileResponse('web/index.html')

clients = []
subs = []

async def websocket_handler(request):
    global clients
    global subs
    ws = web.WebSocketResponse()
    client = {'ws': ws}
    clients.append(client)

    print(f'handler {request}')
    await ws.prepare(request)

    async for msg in ws:
        if msg.type == WSMsgType.TEXT:
            print(f'msg :{msg.data}:')
            cmd = json.loads(msg.data)
            t = cmd['type']
            if t == 'hello':
                n = cmd['name']
                names = [c['name'] for c in clients if 'name' in c]
                while n in names:
                    n += '_'
                cmd['name'] = n
                for c in clients:
                    if c['ws'] == ws:
                        client['name'] = n
            elif t == 'subscribe':
                subs.append({'filter': re.compile(cmd['filter']), 'ws': ws})
            elif t == 'close':
                clients.remove(ws)
                await ws.close()

            cmd['from'] = client.get('name', '')
            for sub in subs:
                if sub['filter'].match(t):
                    try:
                        await sub['ws'].send_str(json.dumps(cmd))
                    except:
                        # maybe remove client?
                        pass
        elif msg.type == WSMsgType.ERROR:
            clients.remove(ws)
            rmsubs = list([s for s in subs if s['ws'] == ws])
            for s in rmsubs:
                subs.remove(s)
            print('ws connection closed with exception %s' % ws.exception())

    return ws


def create_runner():
    app = web.Application()
    app.add_routes([
        web.get('/ws', websocket_handler),
        web.get('/',   http_handler),
        web.static('/',  'web'),
    ])
    return web.AppRunner(app)


async def start_server(host, port):
    runner = create_runner()
    await runner.setup()
    site = web.TCPSite(runner, host, port)
    await site.start()


if __name__ == "__main__":
    arguments = docopt(__doc__, version='coxy server 0')
    loop = asyncio.get_event_loop()
    loop.run_until_complete(start_server(arguments['--host'], arguments['--port']))
    loop.run_forever()

